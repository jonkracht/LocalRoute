


def get_course_info(base_url):
    """Function to retrieve disc golf course attributes form dgcoursereview.com"""

    import requests
    from bs4 import BeautifulSoup
    import numpy as np
    import json
    import re



    # A few function definitions:

    def get_html(url):
        '''Function to grab HTML and return the text portions.'''

        r = requests.get(url)
        soup = BeautifulSoup(r.text, 'html.parser')

        return soup


    def get_og_info(html, tag_name, missing_marker):
        '''Function to return features contained in og tags on the DGCR website.'''
        try:
            return html.find(property = ['og:' + tag_name]).get('content')
        except:
            return missing_marker


    def get_itemprop_info(html, tag_name, missing_marker):
        '''Function to return features contained in itemprop tags on the DGCR website.'''
        try:
            return html.find(itemprop = tag_name).get('content')
        except:
            return missing_marker


    def get_text_info(html, tag, content_number, missing_marker):
        '''Function to return features stored on the DGCR website.'''
        try:
            return html.find(string=tag).find_parent().find_previous().contents[content_number]
        except:
            return missing_marker

    def get_hole_info(html, tag, missing_marker):
        '''Function to return the number of holes on a course from the DGCR website.'''
        try:
            return html.find(string=tag).find_parent().find_previous_sibling().text
        except:
            return missing_marker



    # Get html of desired dgcr page
    html = get_html(base_url + '&mode=ci')

    # Create dictionary to store course info parameters
    course_info = {}

    course_info['url'] = base_url
    
    # Grab tag with type 'application/ld+json' with multiple parameters of interest
    dict=json.loads(html.find('script', type="application/ld+json").text)
    dict_keys=['name','description','isAccessibleForFree','address','geo','aggregateRating','amenityFeature']

    for d in dict_keys:
        # Handle potential missing values with try/except
        try: 
            course_info[d] = dict[d]
        except:
            course_info[d] = 'None'

    # Pull out some other info peppered throughout page
    keys = ['Year established', 'Designer', 'Multiple Tees / Pins', 'Tee Type', 'Hole Type']

    for key in keys:
        try: 
            course_info[key] = html.find(string = re.compile(key)).find_parent().find_next().text
        except:
            course_info[key] = 'None'


    #  Parameters where value is listed before key
    for key in ['Water in play']:
        try: 
            course_info[key] = html.find(string = re.compile(key)).find_parent().find_previous().text
        except:
            course_info[key] = 'None'
    

    # Grab attributes from table rows
    S = html.find(string=re.compile('SSE')).find_parent().find_parent().find_all(class_="c-bullet")

    q = []
    for s in S:
        q.append(s.text.strip())

        course_info['SSE'] = q



    #course_info['course_type'] = str(get_text_info(html, 'Course Type:', 0, missing_text_marker))
    #course_info['year_established'] = str(get_text_info(html, 'Year Established:', 0, missing_number_marker))
    #course_info['landscape'] = str(get_text_info(html, 'Course Landscape / Terrain:', 0, missing_text_marker)).strip()


    #course_info['holes'] = str(get_hole_info(html, 'Holes / Baskets:', missing_number_marker))


    #course_info['length'] = str(get_text_info(html, 'Course Length: ', 0, missing_number_marker))
    #course_info['multiple_tees_pins'] = get_text_info(html, 'Multiple Tees / Pins:', 0, missing_text_marker)
    #course_info['tee_type'] = str(get_text_info(html, 'Tee Type:', 0, missing_text_marker))
    #course_info['basket_type'] = str(get_text_info(html, 'Hole Type:', 0, missing_text_marker))


    #try:
    #    course_info['par'] = max(html.find(string='Par Info:').find_parent().find_previous_sibling().text.split())
    #except:
    #    course_info['par'] = missing_number_marker


    #try:
    #    course_info['sse'] = float(html.find(string = lambda text: text and 'SSE' in text).find_parent().find_previous().next_sibling.strip())
    #except:
    #    course_info['sse'] = missing_number_marker


    return course_info



if __name__ == '__main__':
    base_url = 'https://www.dgcoursereview.com/course.php?id='
    default_course_id = '5583' # Stafford Woods, NJ

    course_id = input('Enter DGCR ID of interest (default is ' + default_course_id + '): ')

    if course_id == "":
        course_id = default_course_id

    course_data = get_course_info(base_url + course_id)
    
    for key, value in course_data.items():
        print(key+':  ' + str(value))

