
def get_course_info(base_url):
    """Function to retrieve disc golf course attributes form dgcoursereview.com"""

    import requests
    from bs4 import BeautifulSoup
    import numpy as np


    # A few function definitions:

    def get_html(url):
        '''Function to grab HTML and return the text portions.'''

        r = requests.get(url)
        soup = BeautifulSoup(r.text, 'html.parser')

        return soup


    def get_og_info(html, tag_name, missing_marker):
        '''Function to return features contained in og tags on the DGCR website.'''
        try:
            return html.find(property = ['og:' + tag_name]).get('content')
        except:
            return missing_marker


    def get_itemprop_info(html, tag_name, missing_marker):
        '''Function to return features contained in itemprop tags on the DGCR website.'''
        try:
            return html.find(itemprop = tag_name).get('content')
        except:
            return missing_marker


    def get_text_info(html, tag, content_number, missing_marker):
        '''Function to return features stored on the DGCR website.'''
        try:
            return html.find(string=tag).find_parent().find_previous().contents[content_number]
        except:
            return missing_marker

    def get_hole_info(html, tag, missing_marker):
        '''Function to return the number of holes on a course from the DGCR website.'''
        try:
            return html.find(string=tag).find_parent().find_previous_sibling().text
        except:
            return missing_marker


    ####################################################################

    # Grab "Course Info" attributes
    html = get_html(base_url + '&mode=ci')

    # Missing values handling
    missing_text_marker, missing_number_marker = None, None

    # Store attributes in a dictionary
    course_info = {}


    course_info['url'] = base_url

    course_info['name'] = get_og_info(html, 'title', missing_text_marker)
    course_info['locality'] = get_og_info(html, 'locality', missing_text_marker)
    course_info['region'] = get_og_info(html, 'region', missing_text_marker)
    course_info['postal_code'] = get_og_info(html, 'postal-code', missing_number_marker)
    course_info['country_name'] = get_og_info(html, 'country-name', missing_text_marker)
    course_info['latitude'] = get_og_info(html, 'latitude', missing_number_marker)
    course_info['longitude'] = get_og_info(html, 'longitude', missing_number_marker)


    course_info['rating'] = get_itemprop_info(html, 'ratingValue', missing_number_marker)
    course_info['rating_count'] = get_itemprop_info(html, 'ratingCount', missing_number_marker)


    course_info['course_type'] = str(get_text_info(html, 'Course Type:', 0, missing_text_marker))
    course_info['year_established'] = str(get_text_info(html, 'Year Established:', 0, missing_number_marker))
    course_info['landscape'] = str(get_text_info(html, 'Course Landscape / Terrain:', 0, missing_text_marker)).strip()


    course_info['holes'] = str(get_hole_info(html, 'Holes / Baskets:', missing_number_marker))


    course_info['length'] = str(get_text_info(html, 'Course Length: ', 0, missing_number_marker))
    course_info['multiple_tees_pins'] = get_text_info(html, 'Multiple Tees / Pins:', 0, missing_text_marker)
    course_info['tee_type'] = str(get_text_info(html, 'Tee Type:', 0, missing_text_marker))
    course_info['basket_type'] = str(get_text_info(html, 'Hole Type:', 0, missing_text_marker))


    try:
        course_info['par'] = max(html.find(string='Par Info:').find_parent().find_previous_sibling().text.split())
    except:
        course_info['par'] = missing_number_marker


    try:
        course_info['sse'] = float(html.find(string = lambda text: text and 'SSE' in text).find_parent().find_previous().next_sibling.strip())
    except:
        course_info['sse'] = missing_number_marker


    return course_info



if __name__ == '__main__':
    base_url = 'https://www.dgcoursereview.com/course.php?id='
    course_id = '5583' # Stafford Woods, NJ

    course_data = get_course_info(base_url + course_id)
    print(course_data)
    print('Finished')
